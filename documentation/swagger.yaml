openapi: 3.0.0
info:
  version: 1.0.0
  title: Blog Web API
  description: A Node.js API for managing blog posts, comments, and user interactions.
  termsOfService: http://example.com/terms/
  contact:
    name: API Support
    url: http://example.com/support
    email: support@example.com
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT
servers:
  - url: http://localhost:4000/api
    description: Local development server

paths:
  /posts:
    get:
      summary: Get all blog posts
      responses:
        '200':
          description: List of blog posts
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/BlogPost'
    post:
      summary: Create a new blog post
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BlogPost'
      responses:
        '201':
          description: Blog post created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BlogPost'

  /posts/{id}:
    get:
      summary: Get a specific blog post by ID
      parameters:
        - name: id
          in: path
          required: true
          description: The ID of the blog post
          schema:
            type: string
      responses:
        '200':
          description: Blog post details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BlogPost'
        '404':
          description: Blog post not found
    put:
      summary: Update a blog post by ID
      parameters:
        - name: id
          in: path
          required: true
          description: The ID of the blog post
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BlogPost'
      responses:
        '200':
          description: Blog post updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BlogPost'
    delete:
      summary: Delete a blog post by ID
      parameters:
        - name: id
          in: path
          required: true
          description: The ID of the blog post
          schema:
            type: string
      responses:
        '200':
          description: Blog post deleted

components:
  schemas:
    BlogPost:
      type: object
      required:
        - title
        - content
        - author
      properties:
        id:
          type: string
          description: Unique identifier for the blog post
        title:
          type: string
          description: Title of the blog post
        content:
          type: string
          description: Content of the blog post
        author:
          type: string
          description: Author of the blog post
        tags:
          type: array
          items:
            type: string
          description: Tags associated with the blog post
        likes:
          type: integer
          default: 0
          description: Number of likes on the post
        createdAt:
          type: string
          format: date-time
          description: Timestamp when the post was created
        updatedAt:
          type: string
          format: date-time
          description: Timestamp when the post was last updated
